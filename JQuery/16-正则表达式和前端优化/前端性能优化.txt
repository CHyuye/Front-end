常用正则规则
--用户名验证（数字、字母、下划线）
var reUser = /^\w{6,20}$/;

--邮箱验证
var reMail = /^[a-z0-9][\w\.\-]*@[a-z0-9\-]+(\.[a-z]{2,5}){1,2}$/i;

--密码验证
var rePass = /^[\w!@#$%^&*]{6,20}$/;

--手机号码验证
var rePhone = /^1[3458]\d{9}$/;


前端性能优化  
一、代码部署
1.代码的压缩与合并
2.图片，js，css等静态资源使用和主站不同域名地址存储，从而使得传输资源部会带上不必要的cookie信息
3.使用内容分发网络CDN
4.为文件设置Last-Modified，Expires和Etag
5.使用GZIP压缩传送
6.权衡DNS查找次数（使用不同域名会增加DNS查找）
7.避免不必要的重定向（加"/"）

二、编码
1--HTML
1.使用结果清晰，简单，语义化标签
2.避免空的src和href
3.不要再HTML中缩放图片

2--css
1.精简css选择器
2.把css放在顶部
3.避免@import方式引入样式
4.css使用base64图片数据取代图片文件，减少请求在线转base64网站，http://tool.css-js.com/base64.html
5.使用css动画来取代JavaScript动画
6.使用字体图标
7.使用svg图片
8.使用css雪碧图
9.避免使用css表达式
body{
	background-color:expression((new Date()).getSeconds()%2?"#8804ff":"");
}

3--JavaScript
1.减少引用库的个数
2.使用requirejs或seajs异步加载js
3.JS放到页面底部引入
4.避免全局查找
5.使用原生方式
6.用switch语句替代复杂的ifelse语句
7.减少语句数，比如说多个变量的声明可以写成一句
8.使用字面量表达式来初始化数组或者对象
9.使用innerHTML替代复杂的元素注入
10.使用事件代理（事件委托）
11.避免多次访问dom选择集
12.高频触发事件设置函数节流
13.使用Web Storage缓存数据